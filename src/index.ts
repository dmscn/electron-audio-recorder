import { app, BrowserWindow, session, ipcMain } from 'electron';
import path from 'path';
import fs from 'fs';


// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

app.commandLine.appendSwitch('no-sandbox');

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// Workaround for WSL path issue
let preload = MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY;
if (preload.startsWith('/home') && process.platform === 'win32') {
  preload = preload.replace(/^\/home/, '//wsl.localhost/Ubuntu/home')
    .replace(/\//g, '\\');
}
const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  createWindow();

  // Intercept and modify response headers for our dev server
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    // Only override headers for our dev server URLs
    if (details.url.startsWith('http://localhost:3000')) {
      callback({
        responseHeaders: {
          ...details.responseHeaders,
          "Content-Security-Policy": [
            "default-src 'self' data:; connect-src 'self' http://127.0.0.1:8000; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; media-src 'self' blob: data:"
          ],
        },
      });
    } else {
      callback({ responseHeaders: details.responseHeaders });
    }
  });

  ipcMain.handle('save-audio', async (_event, buffer: ArrayBuffer) => {
    try {
      // Get the temporary directory
      const tempDir = app.getPath('temp');
      const inputFilePath = path.join(tempDir, `audio_${Date.now()}.webm`);
      const outputFilePath = path.join(tempDir, `audio_${Date.now()}.wav`);

      // Write the WebM buffer to a file
      fs.writeFileSync(inputFilePath, Buffer.from(buffer));

      return new Promise<string>((resolve, reject) => {
        // (ffmpeg(inputFilePath) as any)
        //   .output(outputFilePath)
        //   .audioFrequency(16000)
        //   .audioChannels(1)
        //   .format('wav')
        //   .on('end', () => {
        //     resolve(outputFilePath); // Return the WAV file path
        //   })
        //   .on('error', (err: Error) => reject(err))
        //   .run();
      });
    } catch (error) {
      console.error("Error saving audio:", error);
      throw error;
    }
  });
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

